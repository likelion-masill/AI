name: CD - Build on Server (no registry)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  DEPLOY_DIR: /home/${{ secrets.SERVER_USER }}/masil

jobs:
  rsync-build-up:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          printf "Host *\n  StrictHostKeyChecking no\n" >> ~/.ssh/config

      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Sync source -> server
        env:
          HOST: ${{ secrets.SSH_HOST }}
          USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh ${USER}@${HOST} "mkdir -p ${DEPLOY_DIR}"
          rsync -avr --delete --exclude '.git' ./ ${USER}@${HOST}:${DEPLOY_DIR}/

      - name: Build & Up on server
        env:
          HOST: ${{ secrets.SSH_HOST }}
          USER: ${{ secrets.SERVER_USER }}
          DEPLOY_DIR: ${{ env.DEPLOY_DIR }}
        run: |
          ssh ${USER}@${HOST} "
            set -euxo pipefail
            echo '== DEPLOY_DIR =='; echo ${DEPLOY_DIR}
            echo '== ls DEPLOY_DIR =='; ls -al ${DEPLOY_DIR}
            # compose 파일 절대경로로 고정
            COMPOSE_FILE=${DEPLOY_DIR}/docker-compose.yml
            if [ ! -f \"${COMPOSE_FILE}\" ]; then
              # 대안 파일명도 체크
              if [ -f \"${DEPLOY_DIR}/compose.yaml\" ]; then
                COMPOSE_FILE=${DEPLOY_DIR}/compose.yaml
              elif [ -f \"${DEPLOY_DIR}/docker-compose.yml\" ]; then
                COMPOSE_FILE=${DEPLOY_DIR}/docker-composee.yml
              else
                echo 'ERROR: compose 파일을 찾지 못했습니다.'
                echo '== 트리 출력 =='; ls -R ${DEPLOY_DIR}
                exit 1
              fi
            fi
            echo Using compose file: ${COMPOSE_FILE}
            docker compose version
            docker compose -f ${COMPOSE_FILE} config >/dev/null
            docker compose -f ${COMPOSE_FILE} build --pull
            docker compose -f ${COMPOSE_FILE} up -d
            docker image prune -f
          "
